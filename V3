import tkinter as tk
from tkinter import Button, Entry, Scrollbar
import sqlite3
from openai import OpenAI

class GUIManager:
    def __init__(self, root, data_functions):
        self.root = root
        self.data_functions = data_functions

        # Create the scrollbar before creating other widgets
        self.scrollbar = tk.Scrollbar(self.root)
        self.create_widgets()

    def create_widgets(self):
        # Canvas widget for scrolling
        self.canvas = tk.Canvas(self.root, yscrollcommand=self.scrollbar.set)
        self.canvas.grid(row=0, column=0, padx=10, pady=10, sticky='nsew', columnspan=3)

        # Frame inside the canvas
        self.frame = tk.Frame(self.canvas)
        self.canvas.create_window((0, 0), window=self.frame, anchor='nw')

        # Entry box for user prompt
        self.entry_prompt = Entry(self.frame, width=50)
        self.entry_prompt.grid(row=0, column=0, padx=10, pady=10, columnspan=2)

        # Button to generate response
        self.button_generate = Button(self.frame, text="Generate and Display Report", command=self.on_generate)
        self.button_generate.grid(row=1, column=0, padx=10, pady=10, columnspan=2)

        # Text widget for displaying responses
        self.text_display = tk.Text(self.frame, width=50, height=10)
        self.text_display.grid(row=2, column=0, padx=10, pady=10, columnspan=2)

        # Scrollbar for the entire window
        self.scrollbar.grid(row=0, column=3, rowspan=3, sticky='ns')

        # Configure the canvas and the root window for scrolling
        self.canvas.configure(scrollregion=self.canvas.bbox("all"))

        # Configure row and column weights for resizing
        self.root.rowconfigure(0, weight=1)
        self.root.columnconfigure(0, weight=1)

    def on_generate(self):
        # Export data from the database into an array
        data_array = self.data_functions.export_data_as_array()

        # Submit data array to GPT for collation and summarization
        collated_report = self.data_functions.submit_data_to_gpt(data_array)

        # Display the collated report in the Text widget
        self.text_display.delete(1.0, tk.END)  # Clear previous content
        self.text_display.insert(tk.END, collated_report)


class GPTConnection:
    def __init__(self, api_key):
        self.api_key = api_key
        self.client = OpenAI(api_key=api_key)

    def generate_response(self, prompt, engine="text-davinci-003", max_tokens=500):
        try:
            response = self.client.Completion.create(
                engine=engine,
                prompt=prompt,
                max_tokens=max_tokens,
            )
            return response.choices[0].text.strip()
        except Exception as e:
            print(f'An error occurred: {e}')
            return None


class DataFunctions:
    def __init__(self, sql_functions, gpt_connection):
        self.sql_functions = sql_functions
        self.gpt_connection = gpt_connection

    def export_data_as_array(self):
        # Retrieve data from the database
        data = self.sql_functions.get_data_from_database()

        # Transform data into an array
        data_array = [f"{row['input_topic']}: {row['part_1']} {row['part_2']}" for row in data]

        return data_array

    def submit_data_to_gpt(self, data_array):
        # Define the prompt for GPT
        prompt = f"Collate and summarize the following data:\n\n" + "\n".join(data_array)

        # Submit the prompt to GPT for collation and summarization
        collated_report = self.gpt_connection.generate_response(prompt)

        return collated_report


class SQLFunctions:
    def __init__(self):
        pass

    def get_data_from_database(self):
        # Connect to the SQLite database
        conn = sqlite3.connect('chatgpt_responses.db')
        cursor = conn.cursor()

        # Retrieve data from the database
        cursor.execute('SELECT * FROM responses')
        data = cursor.fetchall()

        # Close the connection
        conn.close()

        return data


if __name__ == "__main__":
    root = tk.Tk()
    root.title("ChatGPT GUI")

    ai_key = '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'
    
    gpt_connection = GPTConnection(ai_key)
    sql_functions = SQLFunctions()
    data_functions = DataFunctions(sql_functions, gpt_connection)

    gui_manager = GUIManager(root, data_functions)

    root.mainloop()
